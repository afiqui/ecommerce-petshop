// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  fullName         String
  password         String
  profilePicture   String
  address          String
  phone            String
  cpf              String
  creditCardNumber String
  creditCardName   String
  creditCardCVC    String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  Order            Order[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  Product     Product[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  rating    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Product   Product?  @relation(fields: [productId], references: [id])
  productId String?   @db.ObjectId
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  animal      String
  image       String
  Category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?   @db.ObjectId
  Comment     Comment[]
  rating      Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  Order       Order?    @relation(fields: [orderId], references: [id])
  orderId     String?   @db.ObjectId
}

model Order {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  code       String
  totalPrice Float
  products   Product[]
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  status     String
}
